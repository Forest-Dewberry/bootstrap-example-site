trigger:
  branches:
    include:
    - main
  paths:
    include:
    - pipelines/iac

pool:
  vmImage: ubuntu-latest
variables:
- template: pipeline-variables.yml

stages:
- stage: TF_BUILD
  jobs:
  - job: Build
    
    steps:
    
    - task: AzurePowerShell@5
      displayName: Create Remote Terraform Backend
      inputs:
        azureSubscription: 'bf-united-dev'
        ScriptPath: './pipelines/iac/backendConfig.ps1'
        ScriptArguments:
          -resourceGroupName $(TF_VAR_REMOTE_RG) `
          -location $(TF_VAR_LOCATION) `
          -storageAccountName $(TF_VAR_REMOTE_SA) `
          -containerName $(TF_VAR_REMOTE_CR)
        azurePowerShellVersion: 'LatestVersion'

    - task: TerraformTaskV3@3
      displayName: 'Terraform Init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        backendServiceArm: 'bf-united-dev'
        workingDirectory: './pipelines/iac'
        backendAzureRmResourceGroupName: '$(terraformresourcegroup)'
        backendAzureRmStorageAccountName: '$(terraformstorageaccount)'
        backendAzureRmContainerName: '$(terraformstoragecontainer)'
        backendAzureRmKey: 'terraform.tfstate'

    # - task: AzureCLI@2
    #   displayName: Punch a hole in the wall
    #   inputs:
    #     azureSubscription: 'bf-united-dev'
    #     scriptType: pscore
    #     scriptLocation: inlineScript
    #     inlineScript: |
    #       az storage account update --resource-group bf-capacity-tool-rg --name bfcapacitytool --default-action Allow
    #       $ip=(Invoke-RestMethod http://ipinfo.io/json | Select -exp ip)
    #       echo $ip
    #       #az storage account network-rule add --resource-group bf-capacity-tool-rg --account-name bfcapacitytool --ip-address $ip

    - task: TerraformTaskV3@3
      displayName: 'Terraform Plan'
      inputs:
        provider: 'azurerm'
        command: 'plan'
        workingDirectory: './pipelines/iac'
        environmentServiceNameAzureRM: 'bf-united-dev'

    - task: TerraformTaskV3@3
      displayName: 'Terraform Apply'
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: './pipelines/iac'
       # commandOptions: '--refresh-only'
        environmentServiceNameAzureRM: 'bf-united-dev'
      condition: and(succeeded(),eq(variables['tfDestroy'],'false')) 

    - task: TerraformTaskV3@3
      displayName: 'Terraform Destroy'
      inputs:
        provider: 'azurerm'
        command: 'destroy'
        workingDirectory: './pipelines/iac'
        environmentServiceNameAzureRM: 'bf-united-dev'
      condition: and(succeeded(),eq(variables['tfDestroy'],'true')) 
    
    # - task: AzureCLI@2
    #   displayName: Build the wall
    #   inputs:
    #     azureSubscription: 'bf-united-dev'
    #     scriptType: pscore
    #     scriptLocation: inlineScript
    #     inlineScript: |
    #       az storage account update --resource-group bf-capacity-tool-rg --name bfcapacitytool --default-action Deny
    #   condition: always()